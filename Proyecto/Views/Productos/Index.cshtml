@{
    ViewBag.Title = "Mantenimiento de Productos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="text-center" style="color: #b2b4b2">Mantenimiento Productos</h2>


@(Html.DevExtreme().DataGrid<Proyecto.Models.Producto>()
 .ID("gridContainer")
 .DataSource(d => d.Mvc().Controller("Productos")
     .LoadAction("Listar")
     .InsertAction("Insertar")
     .UpdateAction("Actualizar")
     .DeleteAction("Borrar")
     .Key("IDProducto")
     .OnBeforeSend("beforeSend")
     .OnInserted("onInserted")
        .OnUpdated("onUpdated")
        .OnRemoved("onRemoving")
 )
 .ShowBorders(true)
 .OnInitialized("onLoading")
 .RepaintChangesOnly(true)
 .Export(e => e.Enabled(true))

 .OnExporting("exportToPDF")


    .FilterRow(f => f.Visible(true))
 .SearchPanel(searchPanel => searchPanel.Visible(true))
 .ColumnHidingEnabled(false)
 .RemoteOperations(true)
.Paging(p => p.PageSize(5))
    .Pager(pager =>
    {
        pager.Visible(true);
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new JS("[5, 10, 25, 50, 'all']"));
        pager.ShowInfo(true);
        pager.ShowNavigationButtons(true);
    })
  .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
 .Editing(e => e
 .Mode(GridEditMode.Popup)
 .RefreshMode(GridEditRefreshMode.Reshape)
 .AllowAdding(true)
 .AllowDeleting(true)
 .AllowUpdating(true)
 .UseIcons(true)
)
 .Columns(columns =>
 {
     columns.AddFor(m => m.NombreProducto).Alignment(HorizontalAlignment.Center);
     columns.AddFor(m => m.Precio).Alignment(HorizontalAlignment.Center);
     columns.AddFor(m => m.IDCategoria)
            .Width(125)
            .Lookup(lookup => lookup
                .DataSource(w => w.WebApi().RouteName("Categorias").LoadAction("Listar").Key("IDCategoria"))
                .DisplayExpr("NombreCategoria")
                .ValueExpr("IDCategoria")
            ).Alignment(HorizontalAlignment.Center);
     columns.AddFor(m => m.DescripcionProducto).Alignment(HorizontalAlignment.Center);

     columns.AddFor(m => m.Imagen).Alignment(HorizontalAlignment.Center)
     .Width(100)
     .AllowFiltering(false)
     .AllowSorting(false)
     .EditCellTemplate(
     @<text>
 @(Html.DevExtreme().FileUploader()
        .ID("fileUploader")
        .Name("Foto")
        .Multiple(false)
        .Accept("image/*")
        .UploadMode(FileUploadMode.Instantly)
        .UploadUrl(Url.Action("UploadFile", "Productos"))
        )
     </text>
     )


 .CellTemplate(@<text>
        <div style="max-width: 100px; max-height: 100px; overflow: hidden;">
            <img src="<%- value %>" alt="" style="width: 100%; height: auto;">
        </div>
    </text>);

    })
)













<script>

    function onInserted(e) {
        Swal.fire({
            title: 'Insercion',
            text: 'Se agrego un nuevo registro',
            icon: 'success',
            timerProgressBar: true,
            showConfirmButton: false,
            position: 'center',
            timer: 1500
        });
    }


    function onUpdated(e) {
        Swal.fire({
            title: 'Modificacion',
            text: 'Se ha modificado un registro',
            icon: 'info',
            timerProgressBar: true,
            showConfirmButton: false,
            position: 'center',
            timer: 1500
        });
    }


    function onRemoving(e) {
        Swal.fire({
            title: 'Eliminacion',
            text: 'Se ha Eliminado un registro',
            icon: 'warning',
            timerProgressBar: true,
            showConfirmButton: false,
            position: 'center',
            timer: 1500
        });
    }


    function onLoading(e) {
        Swal.fire({
            title: 'Atención',
            text: 'Cargando Productos',
            icon: 'success',
            timerProgressBar: true,
            showConfirmButton: false,
            position: 'Center',
            timer: 1000
        });
    }

    function beforeSend(operation, ajaxSettings) {
        var data = ajaxSettings.data || {},
            args = Object.keys(data).map(function (key) {
                return key + "=" + data[key];
            }).join(" ");

        var logList = $("#requests ul"),
            time = DevExpress.localization.formatDate(new Date(), "HH:mm:ss"),
            newItem = $("<li>").text([time, ajaxSettings.method, ajaxSettings.url, args].join(" "));

        logList.prepend(newItem);
    }

    function loadGrid() {
        var ds = $("#gridContainer").dxDataGrid("instance").getDataSource();
        ds.reload();
    }

</script>



<script src="~/Scripts/sweetalert2.js"></script>

<script>
    function exportToPDF() {
        var doc = new jsPDF();
        var dataGrid = $("#gridContainer").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid
        }).then(function () {
            doc.save("Productos.pdf");
        });
    }
</script>


@* Script requeridos para exportar a PDF*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>


<script src="@Url.Action("CldrData", "Productos", new { t = CldrDataScriptBuilder.GetCacheParam() })"></script>
<script src="~/Scripts/devextreme/localization/dx.messages.es.js"></script>
